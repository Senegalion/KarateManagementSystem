version: "3.8"

services:
  # --- Infrastructure ---

  service-registry:
    build:
      context: ./microservices/service-registry
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    restart: always

  config-server:
    build:
      context: ./microservices/config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
    depends_on:
      - service-registry
    restart: always

  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    ports:
      - "9191:9191"
    depends_on:
      - service-registry
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: always

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    restart: always

  zipkin:
    image: openzipkin/zipkin:2
    container_name: zipkin
    ports:
      - "9411:9411"
    restart: unless-stopped

#  prometheus:
#    image: prom/prometheus:latest
#    ports: [ "9090:9090" ]
#    volumes:
#      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#
#  grafana:
#    image: grafana/grafana:latest
#    ports: [ "3001:3000" ]
#    depends_on: [ prometheus ]

  # --- Databases ---

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: karate_management
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  postgres-user-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user_db
    ports:
      - "5434:5432"
    volumes:
      - postgres-user-data:/var/lib/postgresql/data

  postgres-club-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: club_db
    ports:
      - "5435:5432"
    volumes:
      - postgres-club-data:/var/lib/postgresql/data

  postgres-feedback-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: feedback_db
    ports:
      - "5436:5432"
    volumes:
      - postgres-feedback-data:/var/lib/postgresql/data

  postgres-auth-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth_db
    ports:
      - "5437:5432"
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data

  postgres-training-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: training_db
    ports:
      - "5438:5432"
    volumes:
      - postgres-training-data:/var/lib/postgresql/data

  postgres-enrollment-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: enrollment_db
    ports:
      - "5439:5432"
    volumes:
      - postgres-enrollment-data:/var/lib/postgresql/data

  postgres-payment-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment_db
    ports:
      - "5440:5432"
    volumes:
      - postgres-payment-data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"

  # --- Microservices ---

  modular-monolith:
    build:
      context: ./modular-monolith
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/karate_management
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - postgres
    restart: always

  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-user-db:5432/user_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
    depends_on:
      - postgres-user-db
      - rabbitmq
      - service-registry
      - config-server
    restart: always

  club-service:
    build:
      context: ./microservices/club-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-club-db:5432/club_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
    depends_on:
      - postgres-club-db
      - rabbitmq
      - service-registry
      - config-server
    restart: always

  feedback-service:
    build:
      context: ./microservices/feedback-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-feedback-db:5432/feedback_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
    depends_on:
      - postgres-feedback-db
      - rabbitmq
      - service-registry
      - config-server
    restart: always

  # --- Frontend ---

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - modular-monolith
    restart: always

  # --- CI/CD Tools ---

  jenkins:
    build:
      context: ./Jenkins
      dockerfile: Dockerfile.jenkins
    ports:
      - "8090:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    restart: always

volumes:
  postgres-data:
  postgres-user-data:
  postgres-club-data:
  postgres-feedback-data:
  postgres-auth-data:
  postgres-training-data:
  postgres-enrollment-data:
  postgres-payment-data:
  jenkins_home:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
